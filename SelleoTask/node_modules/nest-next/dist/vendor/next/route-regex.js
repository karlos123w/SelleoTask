"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNamedMiddlewareRegex = exports.getNamedRouteRegex = exports.getRouteRegex = void 0;
const escape_regexp_1 = require("./escape-regexp");
const remove_trailing_slash_1 = require("./remove-trailing-slash");
function parseParameter(param) {
    const optional = param.startsWith('[') && param.endsWith(']');
    if (optional) {
        param = param.slice(1, -1);
    }
    const repeat = param.startsWith('...');
    if (repeat) {
        param = param.slice(3);
    }
    return { key: param, repeat, optional };
}
function getParametrizedRoute(route) {
    const segments = (0, remove_trailing_slash_1.removeTrailingSlash)(route).slice(1).split('/');
    const groups = {};
    let groupIndex = 1;
    return {
        parameterizedRoute: segments
            .map((segment) => {
            if (segment.startsWith('[') && segment.endsWith(']')) {
                const { key, optional, repeat } = parseParameter(segment.slice(1, -1));
                groups[key] = { pos: groupIndex++, repeat, optional };
                return repeat ? (optional ? '(?:/(.+?))?' : '/(.+?)') : '/([^/]+?)';
            }
            else {
                return `/${(0, escape_regexp_1.escapeStringRegexp)(segment)}`;
            }
        })
            .join(''),
        groups,
    };
}
function getRouteRegex(normalizedRoute) {
    const { parameterizedRoute, groups } = getParametrizedRoute(normalizedRoute);
    return {
        re: new RegExp(`^${parameterizedRoute}(?:/)?$`),
        groups: groups,
    };
}
exports.getRouteRegex = getRouteRegex;
function buildGetSafeRouteKey() {
    let routeKeyCharCode = 97;
    let routeKeyCharLength = 1;
    return () => {
        let routeKey = '';
        for (let i = 0; i < routeKeyCharLength; i++) {
            routeKey += String.fromCharCode(routeKeyCharCode);
            routeKeyCharCode++;
            if (routeKeyCharCode > 122) {
                routeKeyCharLength++;
                routeKeyCharCode = 97;
            }
        }
        return routeKey;
    };
}
function getNamedParametrizedRoute(route) {
    const segments = (0, remove_trailing_slash_1.removeTrailingSlash)(route).slice(1).split('/');
    const getSafeRouteKey = buildGetSafeRouteKey();
    const routeKeys = {};
    return {
        namedParameterizedRoute: segments
            .map((segment) => {
            if (segment.startsWith('[') && segment.endsWith(']')) {
                const { key, optional, repeat } = parseParameter(segment.slice(1, -1));
                let cleanedKey = key.replace(/\W/g, '');
                let invalidKey = false;
                if (cleanedKey.length === 0 || cleanedKey.length > 30) {
                    invalidKey = true;
                }
                if (!isNaN(parseInt(cleanedKey.slice(0, 1)))) {
                    invalidKey = true;
                }
                if (invalidKey) {
                    cleanedKey = getSafeRouteKey();
                }
                routeKeys[cleanedKey] = key;
                return repeat
                    ? optional
                        ? `(?:/(?<${cleanedKey}>.+?))?`
                        : `/(?<${cleanedKey}>.+?)`
                    : `/(?<${cleanedKey}>[^/]+?)`;
            }
            else {
                return `/${(0, escape_regexp_1.escapeStringRegexp)(segment)}`;
            }
        })
            .join(''),
        routeKeys,
    };
}
function getNamedRouteRegex(normalizedRoute) {
    const result = getNamedParametrizedRoute(normalizedRoute);
    return Object.assign(Object.assign({}, getRouteRegex(normalizedRoute)), { namedRegex: `^${result.namedParameterizedRoute}(?:/)?$`, routeKeys: result.routeKeys });
}
exports.getNamedRouteRegex = getNamedRouteRegex;
function getNamedMiddlewareRegex(normalizedRoute, options) {
    const { parameterizedRoute } = getParametrizedRoute(normalizedRoute);
    const { catchAll = true } = options;
    if (parameterizedRoute === '/') {
        const catchAllRegex = catchAll ? '.*' : '';
        return {
            namedRegex: `^/${catchAllRegex}$`,
        };
    }
    const { namedParameterizedRoute } = getNamedParametrizedRoute(normalizedRoute);
    const catchAllGroupedRegex = catchAll ? '(?:(/.*)?)' : '';
    return {
        namedRegex: `^${namedParameterizedRoute}${catchAllGroupedRegex}$`,
    };
}
exports.getNamedMiddlewareRegex = getNamedMiddlewareRegex;
